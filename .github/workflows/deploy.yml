name: Deploy Creator Chapter PWA

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Code Quality & Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Run TypeScript type check
      run: npm run type-check
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check bundle size
      run: npm run build && npm run analyze
      
  # Job 2: Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Run unit tests
      run: npm run test
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        
  # Job 3: Build and Deploy
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Create environment file
      run: |
        echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> .env.production
        echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env.production
        echo "NODE_ENV=production" >> .env.production
        
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        
    - name: Generate PWA icons
      run: npm run generate-icons
      
    - name: Optimize build
      run: |
        # Compress images
        npx imagemin dist/**/*.{jpg,jpeg,png} --out-dir=dist --plugin=imagemin-mozjpeg --plugin=imagemin-pngquant
        
        # Generate service worker precache
        npx workbox generateSW workbox-config.js
        
    - name: Deploy to Staging (develop branch)
      if: github.ref == 'refs/heads/develop'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        destination_dir: staging
        
    - name: Deploy to Production (main branch)
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        cname: app.creatorchapter.com
        
    - name: Deploy to Vercel
      if: github.ref == 'refs/heads/main'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        vercel-args: '--prod'
        
    - name: Deploy to Netlify
      if: github.ref == 'refs/heads/main'
      uses: nwtgck/actions-netlify@v2.1
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        
  # Job 4: Performance & PWA Audit
  audit:
    name: Performance & PWA Audit
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://app.creatorchapter.com
          https://app.creatorchapter.com/auth
          https://app.creatorchapter.com/dashboard
        configPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: PWA Asset Validation
      run: |
        # Check if PWA manifest is valid
        curl -f https://app.creatorchapter.com/manifest.json
        
        # Check if service worker is accessible
        curl -f https://app.creatorchapter.com/sw.js
        
        # Check if icons exist
        curl -f https://app.creatorchapter.com/icons/icon-192x192.png
        curl -f https://app.creatorchapter.com/icons/icon-512x512.png
        
  # Job 5: Notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-deploy, audit]
    if: always()
    
    steps:
    - name: Slack Notification (Success)
      if: needs.build-and-deploy.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: ':rocket: Creator Chapter PWA deployed successfully!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Slack Notification (Failure)
      if: needs.build-and-deploy.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: ':x: Creator Chapter PWA deployment failed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}